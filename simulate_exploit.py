from scapy.all import IP, TCP, Raw, send
import random
import argparse
import time

def generate_nop_sled(length=20):
    return b'\x90' * length

def generate_shellcode():
    # This is a dummy shellcode-like sequence
    return b'\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x53\x89\xe1\xb0\x0b\xcd\x80'

def generate_non_printable_payload(length=100):
    return bytes([random.randint(1, 31) for _ in range(length)])

def generate_large_payload(length=2000):
    return b'A' * length

def send_exploit_traffic(target_ip, target_port, duration=60, interval=1):
    end_time = time.time() + duration

    while time.time() < end_time:
        # Randomly choose an exploit type
        exploit_type = random.choice(['nop_sled', 'shellcode', 'non_printable', 'large_payload'])

        if exploit_type == 'nop_sled':
            payload = generate_nop_sled() + generate_shellcode()
        elif exploit_type == 'shellcode':
            payload = generate_shellcode()
        elif exploit_type == 'non_printable':
            payload = generate_non_printable_payload()
        else:  # large_payload
            payload = generate_large_payload()

        packet = IP(dst=target_ip)/TCP(dport=target_port)/Raw(load=payload)
        send(packet, verbose=False)
        print(f"Sent {exploit_type} payload to {target_ip}:{target_port}")
        time.sleep(interval)

def main():
    parser = argparse.ArgumentParser(description="Generate traffic mimicking memory corruption exploits")
    parser.add_argument("target_ip", help="Target IP address")
    parser.add_argument("target_port", type=int, help="Target port number")
    parser.add_argument("--duration", type=int, default=60, help="Duration of traffic generation in seconds")
    parser.add_argument("--interval", type=float, default=1, help="Interval between packets in seconds")

    args = parser.parse_args()

    print(f"Generating exploit-like traffic to {args.target_ip}:{args.target_port}")
    print(f"Duration: {args.duration} seconds, Interval: {args.interval} seconds")
    send_exploit_traffic(args.target_ip, args.target_port, args.duration, args.interval)
    print("Traffic generation complete.")

if __name__ == "__main__":
    main()